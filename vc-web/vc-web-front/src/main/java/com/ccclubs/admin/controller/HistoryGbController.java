package com.ccclubs.admin.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.apache.commons.lang3.StringUtils;

import com.ccclubs.admin.vo.TableResult;

import com.ccclubs.admin.model.HistoryGb;
import com.ccclubs.admin.service.IHistoryGbService;
import com.ccclubs.admin.query.HistoryGbQuery;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;

/**
 * 车辆国标历史数据Controller
 * @category generated by NovaV1.0
 * 
 * @author 
 * @since V1.0
 */
@RestController
@RequestMapping("/electricity/historyState")
public class HistoryGbController {

	@Autowired
	IHistoryGbService historyGbService;

	/**
	 * 获取分页列表数据
	 * @param query
	 * @param page
	 * @param rows
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public TableResult<HistoryGb> list(HistoryGbQuery query, @RequestParam(defaultValue = "0") Integer page,
			@RequestParam(defaultValue = "10") Integer rows,
	@RequestParam(defaultValue = "desc" )String order) {
		if (null==query.getCsVinEquals()){return  new TableResult<HistoryGb>();}
		TableResult<HistoryGb> pageInfo = historyGbService.getPage(query, page, rows,order);
		List<HistoryGb> list = pageInfo.getData();
		for(HistoryGb data : list){
			registResolvers(data);
		}
		return pageInfo;
	}

	
	
	
	/**
	 * 注册属性内容解析器
	 */
	void registResolvers(HistoryGb data){
		if(data!=null){
			data.registResolver(com.ccclubs.admin.resolver.HistoryGbResolver.协议类型.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.HistoryGbResolver.报文类型.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.HistoryGbResolver.校验结果.getResolver());
		}
	}
	

	
	

	
}
