package com.ccclubs.admin.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.apache.commons.lang3.StringUtils;

import com.ccclubs.admin.vo.TableResult;

import com.ccclubs.admin.entity.SrvDictCrieria;
import com.ccclubs.admin.model.SrvDict;
import com.ccclubs.admin.service.ISrvDictService;
import com.ccclubs.admin.query.SrvDictQuery;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;

/**
 * 字典信息管理Controller
 * @category generated by NovaV1.0
 * 
 * @author 
 * @since V1.0
 */
@RestController
@RequestMapping("/base/dict")
public class SrvDictController {

	@Autowired
	ISrvDictService srvDictService;

	/**
	 * 获取分页列表数据
	 * @param query
	 * @param page
	 * @param rows
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public TableResult<SrvDict> list(SrvDictQuery query, @RequestParam(defaultValue = "0") Integer page,
			@RequestParam(defaultValue = "10") Integer rows) {
		PageInfo<SrvDict> pageInfo = srvDictService.getPage(query.getCrieria(), page, rows);
		List<SrvDict> list = pageInfo.getList();
		for(SrvDict data : list){
			registResolvers(data);
		}
		
		TableResult<SrvDict> r = new TableResult<>(pageInfo);
		return r;
	}

	/**
	 * 创建保存字典信息管理
	 * @return
	 */
	@RequestMapping(value="/add", method = RequestMethod.POST)
	public VoResult<?> add(SrvDict data){
		if (data.getCreateBy() == null) {
			data.setCreateBy("0");
		}
		if (data.getUpdateBy() == null) {
			data.setUpdateBy("0");
		}
		if (data.getCreateDate() == null) {
			data.setCreateDate(new Date());
		}
		if (data.getUpdateDate() == null) {
			data.setUpdateDate(new Date());
		}
		srvDictService.insert(data);
		return VoResult.success();
	}
	
	/**
	 * 更新字典信息管理
	 * @param data
	 * @return
	 */
	@RequestMapping(value="/update", method = RequestMethod.POST)
	public VoResult<?> update(SrvDict data){
		srvDictService.updateByPrimaryKeySelective(data);
		return VoResult.success();
	}
	
	/**
	 * 删除字典信息管理
	 * @return
	 */
	@RequestMapping(value="delete", method = RequestMethod.DELETE)
	public VoResult<?> delete(@RequestParam(required=true)final Long[] ids){
		srvDictService.batchDelete(ids);
		return VoResult.success();
	}
	
	/**
	 * 注册属性内容解析器
	 */
	void registResolvers(SrvDict data){
		if(data!=null){
			data.registResolver(com.ccclubs.admin.resolver.SrvDictResolver.删除标记.getResolver());
		}
	}
	
	/**
	 * 获取单条字典信息管理信息
	 */
	@RequestMapping(value="/detail/{id}", method = RequestMethod.GET)
	public VoResult<Map<String, SrvDict>> detail(@PathVariable(required = true) Long id){
		SrvDict data = srvDictService.selectByPrimaryKey( id.intValue());
		Map<String, SrvDict> map = new HashMap<String, SrvDict>();
		registResolvers(data);
		map.put("tbody", data);
		return VoResult.success().setValue(map);
	}
	
	
	/**
	 * 根据文本检索字典信息管理信息
	 */
	@RequestMapping(value="/query", method = RequestMethod.GET)
	public VoResult<Map<String, List<Map<String, Object>>>> query(String text , String where , SrvDict queryRecord){
		SrvDictCrieria query = new SrvDictCrieria();
		SrvDictCrieria.Criteria c = query.createCriteria();
		if(!StringUtils.isEmpty(text)){
			String val = String.valueOf(text);
			c.andlabelLike(val);
		}
		if(!StringUtils.isEmpty(where)){
			String val = String.valueOf(where);
			c.andtypeEqualTo(val);
		}
//		List<SrvDict> list = srvDictService.selectByExample(query);
		PageInfo<SrvDict> pageInfo = srvDictService.getPage(query, 0, 10);
		List<SrvDict> list = pageInfo.getList();

		List<Map<String, Object>> mapList = new ArrayList<Map<String,Object>>(list.size());
		Map<String, Object> map ;
		for (SrvDict data : list) {
			map = new HashMap<String, Object>();
			map.put("value", data.getvalue());
			map.put("text", data.getlabel());
			mapList.add(map);
		}
		return VoResult.success().setValue(mapList);
	}
	
}
