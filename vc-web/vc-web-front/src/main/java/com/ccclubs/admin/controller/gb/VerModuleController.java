package com.ccclubs.admin.controller.gb;

import com.ccclubs.admin.entity.VerModuleCrieria;
import com.ccclubs.admin.model.VerModule;
import com.ccclubs.admin.model.VerSoftHardware;
import com.ccclubs.admin.query.VerModuleQuery;
import com.ccclubs.admin.service.IVerModuleRelationService;
import com.ccclubs.admin.service.IVerModuleService;
import com.ccclubs.admin.service.IVerSoftHardwareService;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.ccclubs.admin.vo.version.VerModuleRelationVo;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 版本模块管理Controller
 * @category generated by NovaV1.0
 * 
 * @author 
 * @since V1.0
 */
@RestController
@RequestMapping("/version/module")
public class VerModuleController {

	@Autowired
	IVerModuleService verModuleService;

	@Autowired
	IVerSoftHardwareService verSoftHardwareService;

	@Autowired
	private IVerModuleRelationService verModuleRelationService;

	/**
	 * 获取分页列表数据
	 * @param query
	 * @param page
	 * @param rows
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public TableResult<VerModule> list(VerModuleQuery query, @RequestParam(defaultValue = "0") Integer page,
                                       @RequestParam(defaultValue = "10") Integer rows) {
		PageInfo<VerModule> pageInfo = verModuleService.getPage(query.getCrieria(), page, rows);
		List<VerModule> list = pageInfo.getList();
		for(VerModule data : list){
			registResolvers(data);
		}
		
		TableResult<VerModule> r = new TableResult<>(pageInfo);
		return r;
	}

	/**
	 * 创建保存版本模块管理
	 * @return
	 */
	@RequestMapping(value="/add", method = RequestMethod.POST)
	public VoResult<?> add(VerModule data){
		verModuleService.insert(data);
		return VoResult.success();
	}
	
	/**
	 * 更新版本模块管理
	 * @param data
	 * @return
	 */
	@RequestMapping(value="/update", method = RequestMethod.POST)
	public VoResult<?> update(VerModule data){
		verModuleService.updateByPrimaryKey(data);
		return VoResult.success();
	}
	
	/**
	 * 删除版本模块管理
	 * @return
	 */
	@RequestMapping(value="delete", method = RequestMethod.DELETE)
	public VoResult<?> delete(@RequestParam(required=true)final Integer[] ids){
		verModuleService.batchDelete(ids);
		return VoResult.success();
	}
	
	/**
	 * 注册属性内容解析器
	 */
	void registResolvers(VerModule data){
		if(data!=null){
			data.registResolver(com.ccclubs.admin.resolver.VerModuleResolver.模块类型.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerModuleResolver.数据类别.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerModuleResolver.数据项类别.getResolver());
		}
	}
	
	/**
	 * 获取单条版本模块管理信息
	 */
	@RequestMapping(value="/detail/{id}", method = RequestMethod.GET)
	public VoResult<Map<String, VerModule>> detail(@PathVariable(required = true) Integer id){
		VerModule data = verModuleService.selectByPrimaryKey( id.intValue());
		Map<String, VerModule> map = new HashMap<String, VerModule>();
		registResolvers(data);
		map.put("tbody", data);
		return VoResult.success().setValue(map);
	}
	
	
	/**
	 * 根据文本检索版本模块管理信息
	 */
	@RequestMapping(value="/query", method = RequestMethod.GET)
	public VoResult<Map<String, List<Map<String, Object>>>> query(String text , String where , VerModule queryRecord){
		VerModuleCrieria query = new VerModuleCrieria();
		VerModuleCrieria.Criteria c = query.createCriteria();
		if(!StringUtils.isEmpty(text)){
			String val = String.valueOf(text);
			c.andnameLike(val);
		}
		if(!StringUtils.isEmpty(where)){
			Integer val = Integer.valueOf(where);
			c.andidEqualTo(val);
		}
		PageInfo<VerModule> pageInfo = verModuleService.getPage(query, 0, 10);
		List<VerModule> list = pageInfo.getList();

		List<Map<String, Object>> mapList = new ArrayList<Map<String,Object>>(list.size());
		Map<String, Object> map ;
		for (VerModule data : list) {
			map = new HashMap<String, Object>();
			map.put("value", data.getid());
			map.put("text", data.getname());
			mapList.add(map);
		}
		return VoResult.success().setValue(mapList);
	}

	/**
	 * 绑定模块
	 * @return
	 */
	@GetMapping(value="/bind/{verId}")
	public VoResult<?> getAllModuleTableByType(@PathVariable("verId") int verId){
		VerSoftHardware softHardware = verSoftHardwareService.selectByPrimaryKey(verId);
		if (null == softHardware) {
			return VoResult.error("20010",String.format("请求的‘版本’不存在"));
		}
        // 获取版本号对应的软硬件映射
        List<VerModuleRelationVo> relations = verModuleRelationService.selectRelationsByVerId(verId);
        if (relations.size() == 0) {
            VerModule moduleQuery = new VerModule();
            moduleQuery.settype(softHardware.gettype());
            List<VerModule> modules = verModuleService.select(moduleQuery);
            for(VerModule data : modules){
                registResolvers(data);
            }
            return VoResult.success().setValue(modules);
        } else {
            for(VerModuleRelationVo data : relations) {
                registResolvers(data);
            }
            return VoResult.success().setValue(relations);
        }
	}
	
}
