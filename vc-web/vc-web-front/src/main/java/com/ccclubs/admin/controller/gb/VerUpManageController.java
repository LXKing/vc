package com.ccclubs.admin.controller.gb;

import com.alibaba.dubbo.config.annotation.Reference;
import com.ccclubs.admin.dto.VerUpgradeVehicleDTO;
import com.ccclubs.admin.entity.CsVehicleCrieria;
import com.ccclubs.admin.entity.VerUpManageCrieria;
import com.ccclubs.admin.entity.VerUpgradeCrieria;
import com.ccclubs.admin.model.*;
import com.ccclubs.admin.query.VerUpManageQuery;
import com.ccclubs.admin.service.*;
import com.ccclubs.admin.util.UserAccessUtils;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.ccclubs.upgrade.constant.UpgradeType;
import com.ccclubs.upgrade.dto.FtpServer;
import com.ccclubs.upgrade.dto.UpgradeTask;
import com.ccclubs.upgrade.dto.UpgradeVersion;
import com.ccclubs.upgrade.inf.UpgradeInf;
import com.ccclubs.upgrade.util.UpgradeServiceVersion;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.util.*;
import java.util.stream.Collectors;

/**
 * 车机升级管理Controller
 * @category generated by NovaV1.0
 * 
 * @author 
 * @since V1.0
 */
@RestController
@RequestMapping("/upgrade/manage")
public class VerUpManageController {

    public static final Logger logger = LoggerFactory.getLogger(VerUpManageController.class);

	@Autowired
    private IVerUpManageService verUpManageService;

	@Autowired
    private IVerModuleService verModuleService;

	@Autowired
    private IVerUpgradeService verUpgradeService;

	@Autowired
    private IVerSoftHardwareService verSoftHardwareService;

	@Autowired
	private IVerModuleRelationService verModuleRelationService;

    @Autowired
    private IVerFtpSerService verFtpSerService;

    @Autowired
    private UserAccessUtils userAccessUtils;

    @Autowired
    private ICsVehicleService csVehicleService;

    // dubbo-reference------------------------------------------------------
    @Reference(version = UpgradeServiceVersion.V1)
    private UpgradeInf upgradeInf;

	/**
	 * 获取分页列表数据
	 * @param query
	 * @param page
	 * @param rows
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public TableResult<VerUpManage> list(VerUpManageQuery query, @RequestParam(defaultValue = "0") Integer page,
                                         @RequestParam(defaultValue = "10") Integer rows) {
		PageInfo<VerUpManage> pageInfo = verUpManageService.getPage(query.getCrieria(), page, rows);
		List<VerUpManage> list = pageInfo.getList();
		for(VerUpManage data : list){
			registResolvers(data);
		}
		
		TableResult<VerUpManage> r = new TableResult<>(pageInfo);
		return r;
	}

	/**
	 * 创建保存车机升级管理
	 * @return
	 */
	@RequestMapping(value="/add", method = RequestMethod.POST)
	public VoResult<?> add(VerUpManage data){
		verUpManageService.insert(data);
		return VoResult.success();
	}
	
	/**
	 * 更新车机升级管理
	 * @param data
	 * @return
	 */
	@RequestMapping(value="/update", method = RequestMethod.POST)
	public VoResult<?> update(VerUpManage data){
		verUpManageService.updateByPrimaryKeySelective(data);
		return VoResult.success();
	}
	
	/**
	 * 删除车机升级管理
	 * @return
	 */
	@RequestMapping(value="delete", method = RequestMethod.DELETE)
	public VoResult<?> delete(@RequestParam(required=true)final Integer[] ids){
		verUpManageService.batchDelete(ids);
		return VoResult.success();
	}
	
	/**
	 * 注册属性内容解析器
	 */
	void registResolvers(VerUpManage data){
		if(data!=null){
			data.registResolver(com.ccclubs.admin.resolver.VerUpManageResolver.升级状态.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerUpManageResolver.当前版本.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerUpManageResolver.车型.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerUpManageResolver.车辆VIN码.getResolver());
		}
	}

	/**
	 * 注册属性内容解析器
	 */
	void registResolvers(VerModule data){
		if(data!=null){
			data.registResolver(com.ccclubs.admin.resolver.VerModuleResolver.模块类型.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerModuleResolver.数据类别.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerModuleResolver.数据项类别.getResolver());
		}
	}

	/**
	 * 注册属性内容解析器
	 */
	void registResolvers(VerModuleRelation data){
		if(data!=null){
			data.registResolver(com.ccclubs.admin.resolver.VerModuleRelationResolver.是否支持.getResolver());
			data.registResolver(com.ccclubs.admin.resolver.VerModuleRelationResolver.模块描述.getResolver());
		}
	}
	
	/**
	 * 获取单条车机升级管理信息
	 */
	@RequestMapping(value="/detail/{id}", method = RequestMethod.GET)
	public VoResult<Map<String, VerUpManage>> detail(@PathVariable(required = true) Integer id){
		VerUpManage data = verUpManageService.selectByPrimaryKey( id.intValue());
		Map<String, VerUpManage> map = new HashMap<String, VerUpManage>();
		registResolvers(data);
		map.put("tbody", data);
		return VoResult.success().setValue(map);
	}
	
	/**
	 * 开始升级
	 * @return
	 */
	@RequestMapping(value="/upgrade", method = RequestMethod.POST)
	public VoResult<?> upgrade(Integer[] ids, Integer version){
	    // todo 车辆批量升级
        System.out.println("车辆批量升级功能未完成");

        // 获取升级版本信息（升级文件名）
        VerUpgrade verUpgrade = verUpgradeService.selectByPrimaryKey(version);
        // 获取升级服务器
        VerFtpSer verFtpSer = verFtpSerService.selectByPrimaryKey(verUpgrade.getSerFtpId());
        FtpServer ftpServer = new FtpServer()
                .setSerHost(verFtpSer.geturl())
                .setSerPort(String.valueOf(verFtpSer.getport()))
                .setSerUsername(verFtpSer.getSerUsername())
                .setSerPwd(verFtpSer.getSerPwd());

        for (Integer id : ids) {
            VerUpManage verUpManage = verUpManageService.selectByPrimaryKey(id);
            CsVehicle vehicle = csVehicleService.selectByPrimaryKey(verUpManage.getVehicleId());
            // 组装升级任务
            UpgradeTask newTask = new UpgradeTask();
            newTask.setRootTask(true)
                    .setUpgradeManageId(verUpManage.getid())
                    .setVin(vehicle.getCsvVin())
                    .setUpgradeType(UpgradeType.PLUGIN);

            UpgradeVersion upgradeVersion = new UpgradeVersion();
            upgradeVersion.setMajorVer(verUpgrade.getHardVerId())
                    .setPluginVer(verUpgrade.getSoftVerId())
                    .setMajorFileName("") // TODO 主版本文件名
                    .setPluginFileName("")// TODO 插件文件名
                    .setFtpServer(ftpServer);
            try {
                // 调用升级接口
                upgradeInf.doUpgradeTask(newTask);
            } catch (Exception e) {
                logger.error("车辆版本升级失败：vin={}, version={} \n msg={}", newTask.getVin(), version, e.getMessage());
                e.printStackTrace();
                return VoResult.error("20010", "车辆版本升级失败: vin=" + newTask.getVin());
            }
        }
		return VoResult.success();
	}

	/**
	 * 版本对比
	 * @return
	 */
	@RequestMapping(value="/compare/{id}", method = RequestMethod.GET)
	public VoResult<?> compare(@PathVariable(required = true)Integer id){
		VerUpManage verUpManage = verUpManageService.selectByPrimaryKey(id);
		if (Objects.isNull(verUpManage)) {
			return VoResult.error("20010", "请求参数为空");
		}

		// 当前升级版本信息
		VerUpgrade verUpgrade = verUpgradeService.selectByPrimaryKey(verUpManage.getVerCurId());
		// 当前车型所能升级的版本
		VerUpgrade verUpgradeQuery = new VerUpgrade();
		verUpgradeQuery.setModelId(verUpgrade.getModelId());
		List<VerUpgrade> canUpgradeVers = verUpgradeService.select(verUpgradeQuery);
		// 所有软硬件模块
		List<VerModule> allModules = verModuleService.getAllModulesOrdered();
		for(VerModule data : allModules){
			registResolvers(data);
		}
		// 当前软硬件模块映射
		List<VerModuleRelation> currVerVals = verModuleRelationService.getListByUpgradeVerId(verUpManage.getVerCurId());
		for(VerModuleRelation data : currVerVals){
			registResolvers(data);
		}
		Map<String, Object> result = new HashMap<>(2);
		result.put("allModules", allModules);
		result.put("currVerVals", currVerVals);
		result.put("currUpgradeVer", verUpgrade);
		result.put("canUpgradeVers", canUpgradeVers);
		return VoResult.success().setValue(result);
	}

	@GetMapping("/{upVerId}/info")
	public VoResult<?> getUpgradeVersionInfo(@PathVariable("upVerId") Integer upVerId) {
		if (Objects.isNull(upVerId)) {
			return VoResult.error("20010", "请求参数为空");
		}
		// 所有软硬件模块
		List<VerModule> allModules = verModuleService.getAllModulesOrdered();
		for(VerModule data : allModules){
			registResolvers(data);
		}
		// 当前软硬件模块映射
		List<VerModuleRelation> upVerVals = verModuleRelationService.getListByUpgradeVerId(upVerId);
		for(VerModuleRelation data : upVerVals){
			registResolvers(data);
		}
		return VoResult.success().setValue(upVerVals);
	}
	
	/**
	 * 根据文本检索车机升级管理信息
	 */
	@RequestMapping(value="/query", method = RequestMethod.GET)
	public VoResult<Map<String, List<Map<String, Object>>>> query(String text , String where , VerUpManage queryRecord){
		VerUpManageCrieria query = new VerUpManageCrieria();
		VerUpManageCrieria.Criteria c = query.createCriteria();
		if(!StringUtils.isEmpty(text)){
			Integer val = Integer.valueOf(text);
			c.andstatusUpgradeEqualTo(val);
		}
		if(!StringUtils.isEmpty(where)){
			Integer val = Integer.valueOf(where);
			c.andidEqualTo(val);
		}
		PageInfo<VerUpManage> pageInfo = verUpManageService.getPage(query, 0, 10);
		List<VerUpManage> list = pageInfo.getList();

		List<Map<String, Object>> mapList = new ArrayList<Map<String,Object>>(list.size());
		Map<String, Object> map ;
		for (VerUpManage data : list) {
			map = new HashMap<String, Object>();
			map.put("value", data.getid());
			map.put("text", data.getStatusUpgrade());
			mapList.add(map);
		}
		return VoResult.success().setValue(mapList);
	}

    /**
     * 批量导入车辆升级版本信息
     *
     * @return
     */
    @RequestMapping(value = "/insertBatch", method = RequestMethod.POST)
    @Transactional
    public VoResult<?> insertBatchVchicleUpgrade(@CookieValue("token") String token,
                                                 @RequestParam("fileUpload") MultipartFile fileUpload,
                                                 VerUpManage verUpManage) {
        try {
            // 用户导入权限验证
//            SrvUser user = userAccessUtils.getCurrentUser(token);
            // 查找所有绑定升级版本的车辆vin
            List<CsVehicle> vehicleVins = verUpManageService.getAllUpgradeVehicle();

            // 从excel中获取所有车辆升级版本数据
            List<VerUpgradeVehicleDTO> upgradeVehicleInExcel = getConditionVinList(fileUpload, verUpManage);

            if(upgradeVehicleInExcel == null || upgradeVehicleInExcel.size() == 0){
                return VoResult.error("20010", "在excel文件中找不到车辆升级版本信息");
            }
            // 过滤excel在升级版本表中已存在的车辆信息
            upgradeVehicleInExcel = upgradeVehicleInExcel.stream().filter(v -> {
                for (CsVehicle csv : vehicleVins) {
                    if (csv.getCsvVin().equals(v.getCsVehicelVin())) {
                        return false;
                    }
                }
                return true;
            }).collect(Collectors.toList());

            // 查询excel中车辆vin码对应的车辆信息
            List<String> vehicleInExcelVins = upgradeVehicleInExcel.stream().map(up -> up.getCsVehicelVin()).collect(Collectors.toList());
            CsVehicleCrieria vehicleCrieria = new CsVehicleCrieria();
            CsVehicleCrieria.Criteria vc = vehicleCrieria.createCriteria();
            vc.andcsvVinIn(vehicleInExcelVins);
            List<CsVehicle> vehicleList = csVehicleService.selectByExample(vehicleCrieria);

            // 查询excel中车辆当前升级版本号对应的升级版本id
            List<String> verCurrInExcel = upgradeVehicleInExcel.stream().map(up -> up.getVerCurr()).collect(Collectors.toList());
            VerUpgradeCrieria verUpgradeCrieria = new VerUpgradeCrieria();
            VerUpgradeCrieria.Criteria uc = verUpgradeCrieria.createCriteria();
            uc.andupVerNoIn(verCurrInExcel);
            List<VerUpgrade> verUpgradeList = verUpgradeService.selectByExample(verUpgradeCrieria);
            upgradeVehicleInExcel.stream().filter(up -> {
                for (VerUpgrade v : verUpgradeList) {
                    if (v.getUpVerNo().equals(up.getVerCurr())) {
                        up.setVerCurrId(v.getid());
                        return true;
                    }
                }
                return false;
            }).collect(Collectors.toList());
            // 重新组装车辆升级版本信息
            List<VerUpManage> verUpManages = upgradeVehicleInExcel.stream()
                    .filter(up -> {
                        for (CsVehicle v : vehicleList) {
                            if (v.getCsvVin().equals(up.getCsVehicelVin())) {
                                up.setCsModelId(v.getCsvModel());
                                up.setVehicleId(v.getCsvId());
                                return true;
                            }
                        }
                        return false;
                    })
                    .map(up -> {
                        VerUpManage newUpManage = new VerUpManage();
                        newUpManage.setVehicleId(up.getVehicleId());
                        newUpManage.setVerCurId(up.getVerCurrId());
                        newUpManage.setModelId(up.getCsModelId());
                        newUpManage.setStatusUpgrade(verUpManage.getStatusUpgrade());
                        return newUpManage;
                    }).collect(Collectors.toList());

            //批量新增车辆升级版本信息
            if (verUpManages != null && verUpManages.size() > 0) {
                logger.info("开始  批量导入车辆升级版本信息");

                verUpManageService.insertBatchUpgradeManages(verUpManages);

                logger.info("批量导入车辆升级版本信息  结束");
            }
            return VoResult.success();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 从excel中获取车辆版本升级信息
     * @param file
     * @param csVehicleTemp
     * @return
     */
    public List<VerUpgradeVehicleDTO> getConditionVinList(MultipartFile file, VerUpManage csVehicleTemp) {
        List<VerUpgradeVehicleDTO> externalList = new ArrayList<>();
        try {
            Workbook workbook = null;
            InputStream is = file.getInputStream();
            String excelName = file.getOriginalFilename();
            if (excelName.indexOf(".xlsx") > -1) {
                workbook = new XSSFWorkbook(is);
            } else {
                workbook = new HSSFWorkbook(is);
            }
            // 循环工作表Sheet--从第三行开始计算
            for (int numSheet = 0; numSheet < 1; numSheet++) {
                Sheet sheet = workbook.getSheetAt(numSheet);
                if (sheet == null) {
                    continue;
                }
                int rows = sheet.getPhysicalNumberOfRows();
                int columns = sheet.getRow(1).getPhysicalNumberOfCells();//从第二行开始算
                // 循环行Row
                VerUpgradeVehicleDTO upgradeVehicleDTO = null;
                for (int rowNum = 2; rowNum < rows; rowNum ++) {
                    String rowinfo = "";
                    Row row = sheet.getRow(rowNum);
                    if (row != null) {
                        upgradeVehicleDTO = new VerUpgradeVehicleDTO();
                        //遍历列
                        //状态默认值
                        for (int columnNum = 1; columnNum < columns; columnNum++) {
                            Cell cell = row.getCell(columnNum);
                            getExternalData(upgradeVehicleDTO, cell, columnNum);
                        }

                        externalList.add(upgradeVehicleDTO);
                    }
                }
                break;
            }
            return externalList;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public void getExternalData(VerUpgradeVehicleDTO upgradeVehicleDTO, Cell cell, int columnNum) {
        if (cell != null) {
            cell.setCellType(Cell.CELL_TYPE_STRING);
            String value = cell.getStringCellValue();
            if (null != value && !"".equals(value)) {
                switch (columnNum) {
                    case 1: // 车辆VIN码
                        upgradeVehicleDTO.setCsVehicelVin(value);
                        break;
                    case 2: // 当前升级版本号
                        upgradeVehicleDTO.setVerCurr(value);
                        break;
                    default:
                        break;
                }
            }
        }
    }
	
}
