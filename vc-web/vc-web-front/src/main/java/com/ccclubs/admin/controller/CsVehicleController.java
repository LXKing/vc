package com.ccclubs.admin.controller;

import com.ccclubs.admin.entity.CsVehicleCrieria;
import com.ccclubs.admin.model.CsVehicle;
import com.ccclubs.admin.model.SrvUser;
import com.ccclubs.admin.query.CsVehicleQuery;
import com.ccclubs.admin.service.ICsVehicleService;
import com.ccclubs.admin.service.IReportService;
import com.ccclubs.admin.util.UserAccessUtils;
import com.ccclubs.admin.vo.ResultCode;
import com.ccclubs.admin.vo.ResultMsg;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 车辆信息管理Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/admin/vehicle")
public class CsVehicleController {

  @Autowired
  ICsVehicleService csVehicleService;

  @Autowired
  IReportService reportService;

  @Autowired
  UserAccessUtils userAccessUtils;

  /**
   * 获取分页列表数据
   */
  @RequestMapping(value = "/list", method = RequestMethod.GET)
  public TableResult<CsVehicle> list(@CookieValue("token") String token, CsVehicleQuery query,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer rows) {
    SrvUser user = userAccessUtils.getCurrentUser(token);
//    if (null == user) {
//      return new ResultMsg<>(false,
//          ResultCode.INVALID_TOKEN, null);
//    }

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query.getCrieria(), page, rows);
    List<CsVehicle> list = pageInfo.getList();
    for (CsVehicle data : list) {
      registResolvers(data);
    }

    TableResult<CsVehicle> r = new TableResult<>(pageInfo);
    return r;
  }

  /**
   * 创建保存车辆信息管理
   */
  @RequestMapping(value = "/add", method = RequestMethod.POST)
  public VoResult<?> add(CsVehicle data) {
    csVehicleService.insert(data);
    return VoResult.success();
  }

  /**
   * 更新车辆信息管理
   */
  @RequestMapping(value = "/update", method = RequestMethod.POST)
  public VoResult<?> update(CsVehicle data) {
    csVehicleService.updateByPrimaryKeySelective(data);
    return VoResult.success();
  }

  /**
   * 删除车辆信息管理
   */
  @RequestMapping(value = "delete", method = RequestMethod.DELETE)
  public VoResult<?> delete(@RequestParam(required = true) final Long[] ids) {
    csVehicleService.batchDelete(ids);
    return VoResult.success();
  }

  /**
   * 注册属性内容解析器
   */
  void registResolvers(CsVehicle data) {
    if (data != null) {
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.接入商.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车型.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车机设备.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车身颜色.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.地标类型.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车辆领域.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.状态.getResolver());
    }
  }

  /**
   * 获取单条车辆信息管理信息
   */
  @RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
  public VoResult<Map<String, CsVehicle>> detail(@PathVariable(required = true) Long id) {
    CsVehicle data = csVehicleService.selectByPrimaryKey(id.intValue());
    Map<String, CsVehicle> map = new HashMap<String, CsVehicle>();
    registResolvers(data);
    map.put("tbody", data);
    return VoResult.success().setValue(map);
  }

  /**
   * 更换TBox
   */
  @RequestMapping(value = "/bind", method = RequestMethod.POST)
  public VoResult<?> bind(CsVehicle data) {
    csVehicleService.updateByPrimaryKeySelective(data);
    return VoResult.success();
  }

  /**
   * 根据文本检索车辆信息管理信息
   */
  @RequestMapping(value = "/query", method = RequestMethod.GET)
  public VoResult<Map<String, List<Map<String, Object>>>> query(String text, String where,
      CsVehicle queryRecord) {
    CsVehicleCrieria query = new CsVehicleCrieria();
    CsVehicleCrieria.Criteria c = query.createCriteria();
    if (!StringUtils.isEmpty(text)) {
      String val = String.valueOf(text);
      c.andcsvVinLike(val);
    }
    if (!StringUtils.isEmpty(where)) {
      Integer val = Integer.valueOf(where);
      c.andcsvIdEqualTo(val);
    }
    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query, 0, 10);
    List<CsVehicle> list = pageInfo.getList();

    List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
    Map<String, Object> map;
    for (CsVehicle data : list) {
      map = new HashMap<String, Object>();
      map.put("value", data.getCsvId());
      map.put("text", data.getCsvVin());
      mapList.add(map);
    }
    return VoResult.success().setValue(mapList);
  }


  /**
   * 根据文本检索车辆信息管理信息
   */
  @RequestMapping(value = "/search", method = RequestMethod.GET)
  public VoResult<Map<String, List<Map<String, Object>>>> search(String text, String where,
      CsVehicle queryRecord) {
    CsVehicleCrieria query = new CsVehicleCrieria();
    CsVehicleCrieria.Criteria c = query.createCriteria();
    if (!StringUtils.isEmpty(text)) {
      String val = String.valueOf(text);
      c.andcsvVinLike(val);
    }
    if (!StringUtils.isEmpty(where)) {
      Integer val = Integer.valueOf(where);
      c.andcsvIdEqualTo(val);
    }
    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query, 0, 10);
    List<CsVehicle> list = pageInfo.getList();

    List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
    Map<String, Object> map;
    for (CsVehicle data : list) {
      map = new HashMap<String, Object>();
      map.put("value", data.getCsvVin());
      map.put("text", data.getCsvVin() + "(" + data.getCsvCarNo() + ")");
      mapList.add(map);
    }
    return VoResult.success().setValue(mapList);
  }


  /**
   * 根据文本检索车辆信息并导出。
   */
  @RequestMapping(value = "/report", method = RequestMethod.GET)
  public void getReport(HttpServletResponse res, CsVehicleQuery query,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer rows) {

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query.getCrieria(), page, rows);
    List<CsVehicle> list = pageInfo.getList();
    for (CsVehicle data : list) {
      registResolvers(data);
    }

    OutputStream os = null;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String dateNowStr = sdf.format(System.currentTimeMillis());
    /**
     * 命名规则是 表意义+“——”+页号+“——”+页面大小+“——”+日期
     * */
    String fileName = "vehicle_" + page + "_" + rows + "_" + dateNowStr + ".xls";
    try {
      res.setHeader("content-type", "application/vnd.ms-excel");
      res.setContentType("application/vnd.ms-excel");
      res.setHeader("Content-Disposition",
          "attachment; filename=" + new String(fileName.getBytes("UTF-8"), "ISO8859-1"));
      os = res.getOutputStream();
      //文件路径
      ByteArrayOutputStream bytes = null;
      bytes = reportService.reportVehicles(list);
      os.write(bytes.toByteArray());
      os.flush();
      os.close();
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (os != null) {
          os.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }

  }

}
