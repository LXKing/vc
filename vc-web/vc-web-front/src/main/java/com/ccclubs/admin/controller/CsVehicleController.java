package com.ccclubs.admin.controller;

import com.ccclubs.admin.entity.CsMappingCrieria;
import com.ccclubs.admin.entity.CsVehicleCrieria;
import com.ccclubs.admin.model.CsMachine;
import com.ccclubs.admin.model.CsMapping;
import com.ccclubs.admin.model.CsModelMapping;
import com.ccclubs.admin.model.CsVehicle;
import com.ccclubs.admin.model.SrvGroup;
import com.ccclubs.admin.model.SrvUser;
import com.ccclubs.admin.query.CsVehicleQuery;
import com.ccclubs.admin.service.ICsMachineService;
import com.ccclubs.admin.service.ICsMappingService;
import com.ccclubs.admin.service.ICsModelMappingService;
import com.ccclubs.admin.service.ICsVehicleService;
import com.ccclubs.admin.service.IReportService;
import com.ccclubs.admin.service.ISrvGroupService;
import com.ccclubs.admin.util.UserAccessUtils;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 车辆信息管理Controller
 *
 * @author 修改者 Alban
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/admin/vehicle")
public class CsVehicleController {

  @Autowired
  ICsVehicleService csVehicleService;

  @Autowired
  IReportService reportService;
  @Autowired
  ISrvGroupService srvGroupService;
  @Autowired
  ICsModelMappingService csModelMappingService;
  @Autowired
  ICsMachineService csMachineService;

  @Autowired
  ICsMappingService csMappingService;

  @Autowired
  UserAccessUtils userAccessUtils;

  /**
   * 获取分页列表数据
   */
  @RequestMapping(value = "/list", method = RequestMethod.GET)
  public TableResult<CsVehicle> list(
      @CookieValue("token") String token, CsVehicleQuery query,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer rows) {
    SrvUser user = userAccessUtils.getCurrentUser(token);
    this.addQueryConditionsByUser(user, query);
//想法是首先得到对应的用户组来进行处理，对query加上新的条件来限制查询到的结果。
//    if (null == user) {
//      return new ResultMsg<>(false,
//          ResultCode.INVALID_TOKEN, null);
//    }

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query.getCrieria(), page, rows);
    List<CsVehicle> list = pageInfo.getList();
    for (CsVehicle data : list) {
      registResolvers(data);
    }

    TableResult<CsVehicle> r = new TableResult<>(pageInfo);
    return r;
  }

  /**
   * 根据用户添加查询条件。
   */
  private void addQueryConditionsByUser(SrvUser user, CsVehicleQuery query) {
    //首先判断用户所在的组。
    SrvGroup srvGroup = srvGroupService.selectByPrimaryKey(user.getSuGroup().intValue());
    if (srvGroup.getSgFlag().equals("sys_user")) {
      //系统用户，此种用户可以随意查询（为所欲为）

    } else if (srvGroup.getSgFlag().equals("factory_user")) {
      //车厂 （按照车型进行查询）
      CsModelMapping csModelMapping = new CsModelMapping();
      csModelMapping.setUserId(user.getSuId());
      List<CsModelMapping> csModelMappingList = csModelMappingService.select(csModelMapping);
      if (null != csModelMappingList && csModelMappingList.size() > 0) {
        Integer[] csModelIds = new Integer[csModelMappingList.size()];
        for (int i = 0; i < csModelMappingList.size(); i++) {
          csModelIds[i] = csModelMappingList.get(i).getModelId();
        }
        query.setCsvModelIn(csModelIds);
      }
    } else if (srvGroup.getSgFlag().equals("platform_user")) {
      //小散户（通过mapping进行对应）
      CsMappingCrieria csMappingCrieria = new CsMappingCrieria();
      CsMappingCrieria.Criteria criteriaMapping = csMappingCrieria.createCriteria();
      criteriaMapping.andcsmManageEqualTo(user.getSuId());
      List<CsMapping> csMappingList = csMappingService.selectByExample(criteriaMapping);
      if (null != csMappingList && csMappingList.size() > 0) {
        Integer[] carIds = new Integer[csMappingList.size()];
        for (int i = 0; i < csMappingList.size(); i++) {
          carIds[i] = csMappingList.get(i).getCsmCar();
        }
        query.setCsvIdIn(carIds);
      }

    }


  }


  /**
   * 创建保存车辆信息管理
   */
  @RequestMapping(value = "/add", method = RequestMethod.POST)
  public VoResult<?> add(CsVehicle data) {

    if (null == data.getCsvAddTime()) {
      data.setCsvAddTime(new Date());
    }
    if (null == data.getCsvUpdateTime()) {
      data.setCsvUpdateTime(new Date());
    }

    CsVehicle conditionVinVehicle = new CsVehicle();
    conditionVinVehicle.setCsvVin(data.getCsvVin());
    if (csVehicleService.selectCount(conditionVinVehicle) > 0) {
      return VoResult.error("30001", String.format("车架号 %s 已存在", data.getCsvVin()));
    }

    CsVehicle conditionNoVehicle = new CsVehicle();
    conditionNoVehicle.setCsvCarNo(data.getCsvCarNo());
    if (csVehicleService.selectCount(conditionNoVehicle) > 0) {
      return VoResult.error("30002", String.format("车牌号 %s 已存在", data.getCsvCarNo()));
    }

//    CsVehicle conditionEngine = new CsVehicle();
//    conditionEngine.setCsvEngineNo(data.getCsvEngineNo());
//    if (csVehicleService.selectCount(conditionEngine) > 0) {
//      return VoResult.error("30003", String.format("发动机(电机)编号 %s 已存在", data.getCsvEngineNo()));
//    }

    csVehicleService.insert(data);
    return VoResult.success();
  }

  /**
   * 更新车辆信息管理
   */
  @RequestMapping(value = "/update", method = RequestMethod.POST)
  public VoResult<?> update(CsVehicle data) {
    if (null == data.getCsvUpdateTime()) {
      data.setCsvUpdateTime(new Date());
    }
    List<CsVehicle> existVehicleList;
    CsVehicle conditionVinVehicle = new CsVehicle();
    conditionVinVehicle.setCsvVin(data.getCsvVin());
    existVehicleList = csVehicleService.select(conditionVinVehicle);
    if (existVehicleList.size() > 0 && !existVehicleList.get(0).getCsvId()
        .equals(data.getCsvId())) {
      return VoResult.error("30001", String.format("车架号 %s 已存在", data.getCsvVin()));
    }

    if (null != data.getCsvCarNo()) {
      CsVehicle conditionNoVehicle = new CsVehicle();
      conditionNoVehicle.setCsvCarNo(data.getCsvCarNo());
      existVehicleList = csVehicleService.select(conditionNoVehicle);
      if (existVehicleList.size() > 0 && !existVehicleList.get(0).getCsvId().equals(data.getCsvId())) {
        return VoResult.error("30002", String.format("车牌号 %s 已存在", data.getCsvCarNo()));
      }
    }

//    CsVehicle conditionEngine = new CsVehicle();
//    conditionEngine.setCsvEngineNo(data.getCsvEngineNo());
//    existVehicle = csVehicleService.selectOne(conditionEngine);
//    if (null != existVehicle && !existVehicle.getCsvId().equals(data.getCsvId())) {
//      return VoResult.error("30003", String.format("发动机(电机)编号 %s 已存在", data.getCsvEngineNo()));
//    }
    csVehicleService.updateByPrimaryKeySelective(data);
    return VoResult.success();
  }

  /**
   * 删除车辆信息管理
   */
  @RequestMapping(value = "delete", method = RequestMethod.DELETE)
  public VoResult<?> delete(@RequestParam(required = true) final Integer[] ids) {
    csVehicleService.batchDelete(ids);
    return VoResult.success();
  }

  /**
   * 注册属性内容解析器
   */
  void registResolvers(CsVehicle data) {
    if (data != null) {
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.接入商.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车型.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车机设备.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车身颜色.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.地标类型.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.车辆领域.getResolver());
      data.registResolver(com.ccclubs.admin.resolver.CsVehicleResolver.状态.getResolver());
    }
  }

  /**
   * 获取单条车辆信息管理信息
   */
  @RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
  public VoResult<Map<String, CsVehicle>> detail(@PathVariable(required = true) Integer id) {
    CsVehicle data = csVehicleService.selectByPrimaryKey(id);
    Map<String, CsVehicle> map = new HashMap<String, CsVehicle>();
    registResolvers(data);
    map.put("tbody", data);
    return VoResult.success().setValue(map);
  }

  /**
   * 更换TBox
   */
  @RequestMapping(value = "/bind", method = RequestMethod.POST)
  public VoResult<?> bind(CsVehicle data) {
    CsVehicle oldVehicle = csVehicleService.selectByPrimaryKey(data.getCsvId());
    if (null == data.getCsvMachine()) {
      if (null == oldVehicle.getCsvMachine()) {
        return VoResult.success();
      } else
      // 开始解除绑定TBOX
      {
        data.setCsvUpdateTime(new Date());
        csVehicleService.unbindTbox(data);
        return VoResult.success();
      }
    } else {
      CsVehicle conditionVehicle = new CsVehicle();
      conditionVehicle.setCsvMachine(data.getCsvMachine());
      CsVehicle existVehicle = csVehicleService.selectOne(conditionVehicle);
      if (null == existVehicle) {
        conditionVehicle.setCsvId(data.getCsvId());
        conditionVehicle.setCsvUpdateTime(new Date());
        csVehicleService.updateByPrimaryKeySelective(data);
        return VoResult.success();
      } else if (existVehicle.getCsvId().equals(data.getCsvId())) {
        return VoResult.success();
      } else {
        return VoResult.error("30003", "该终端已被其他车辆绑定!");
      }
    }
  }


  /**
   * @param c 此方法仅在 createCriteria()后执行！
   */
  private void addCriteriaByUser(SrvUser user, CsVehicleCrieria.Criteria c) {
    SrvGroup srvGroup = srvGroupService.selectByPrimaryKey(user.getSuGroup().intValue());
    if (srvGroup.getSgFlag().equals("factory_user")) {//如果是车厂用户则只关心车型
      CsModelMapping csModelMapping = new CsModelMapping();
      csModelMapping.setUserId(user.getSuId());
      List<CsModelMapping> csModelMappingList = csModelMappingService.select(csModelMapping);
      if (null != csModelMappingList && csModelMappingList.size() > 0) {
        List<Integer> csModelIds = new ArrayList<>();
        for (CsModelMapping aCsModelMappingList : csModelMappingList) {
          csModelIds.add(aCsModelMappingList.getModelId());
        }
        c.andcsvModelIn(csModelIds);
      }
    } else if (srvGroup.getSgFlag().equals("platform_user")) {
      //小散户（通过mapping进行对应）
      CsMappingCrieria csMappingCrieria = new CsMappingCrieria();
      CsMappingCrieria.Criteria criteriaMapping = csMappingCrieria.createCriteria();
      criteriaMapping.andcsmManageEqualTo(user.getSuId());
      List<CsMapping> csMappingList = csMappingService.selectByExample(criteriaMapping);
      if (null != csMappingList && csMappingList.size() > 0) {
        List<Integer> carIds = new ArrayList<>();
        for (CsMapping aCsMappingList : csMappingList) {
          carIds.add(aCsMappingList.getCsmCar());
        }
        c.andcsvIdIn(carIds);
      }
    }
  }


  /**
   * 根据文本检索车辆信息管理信息
   */
  @RequestMapping(value = "/query", method = RequestMethod.GET)
  public VoResult<Map<String, List<Map<String, Object>>>> query(@CookieValue("token") String token,
      String text, String where,
      CsVehicle queryRecord) {

    SrvUser user = userAccessUtils.getCurrentUser(token);

    CsVehicleCrieria query = new CsVehicleCrieria();
    CsVehicleCrieria.Criteria c = query.createCriteria();
    CsVehicleCrieria.Criteria n = query.createCriteria();

    this.addCriteriaByUser(user, c);
    this.addCriteriaByUser(user, n);

    if (!StringUtils.isEmpty(text)) {
      String val = String.valueOf(text);
      c.andcsvVinLike(val);
      n.andcsvCarNoLike(val);
    }
    if (!StringUtils.isEmpty(where)) {
      Integer val = Integer.valueOf(where);
      c.andcsvIdEqualTo(val);
      n.andcsvIdEqualTo(val);
    }
    query.or(n);

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query, 0, 10);
    List<CsVehicle> list = pageInfo.getList();

    List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
    Map<String, Object> map;
    for (CsVehicle data : list) {
      map = new HashMap<String, Object>();
      map.put("value", data.getCsvId());
      map.put("text", data.getCsvVin() + "(" + data.getCsvCarNo() + ")");
      mapList.add(map);
    }
    return VoResult.success().setValue(mapList);
  }

  /**
   * 根据文本检索车辆信息管理信息
   */
  @RequestMapping(value = "/find", method = RequestMethod.GET)
  public VoResult<Map<String, List<Map<String, Object>>>> find(@CookieValue("token") String token,
      String text, String where,
      CsVehicle queryRecord) {

    SrvUser user = userAccessUtils.getCurrentUser(token);
    CsVehicleCrieria query = new CsVehicleCrieria();
    CsVehicleCrieria.Criteria c = query.createCriteria();
    CsVehicleCrieria.Criteria n = query.createCriteria();

    this.addCriteriaByUser(user, c);
    this.addCriteriaByUser(user, n);

    if (!StringUtils.isEmpty(text)) {
      String val = String.valueOf(text);
      c.andcsvVinLike(val);
      n.andcsvCarNoLike(val);
    }
    if (!StringUtils.isEmpty(where)) {
      Integer val = Integer.valueOf(where);
      c.andcsvIdEqualTo(val);
      n.andcsvIdEqualTo(val);
    }
    query.or(n);

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query, 0, 10);
    List<CsVehicle> list = pageInfo.getList();

    List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
    Map<String, Object> map;
    for (CsVehicle data : list) {
      map = new HashMap<String, Object>();
      CsMachine csMachine = csMachineService.selectByPrimaryKey(data.getCsvMachine());
      if (csMachine != null) {
        map.put("value", csMachine.getCsmNumber());//得到的是车机号。
        map.put("text", data.getCsvVin() + "(" + data.getCsvCarNo() + ")");
        mapList.add(map);
      }

    }
    return VoResult.success().setValue(mapList);
  }

  /**
   * 根据文本检索车辆信息管理信息
   */
  @RequestMapping(value = "/search", method = RequestMethod.GET)
  public VoResult<Map<String, List<Map<String, Object>>>> search(@CookieValue("token") String token,
      String text, String where,
      CsVehicle queryRecord) {

    SrvUser user = userAccessUtils.getCurrentUser(token);

    CsVehicleCrieria query = new CsVehicleCrieria();
    CsVehicleCrieria.Criteria c = query.createCriteria();
    CsVehicleCrieria.Criteria n = query.createCriteria();

    this.addCriteriaByUser(user, c);
    this.addCriteriaByUser(user, n);

    if (!StringUtils.isEmpty(text)) {
      String val = String.valueOf(text);
      c.andcsvVinLike(val);
      n.andcsvCarNoLike(val);
    }
    if (!StringUtils.isEmpty(where)) {
      Integer val = Integer.valueOf(where);
      c.andcsvIdEqualTo(val);
      n.andcsvIdEqualTo(val);
    }

    query.or(n);

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query, 0, 10);
    List<CsVehicle> list = pageInfo.getList();

    List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
    Map<String, Object> map;
    for (CsVehicle data : list) {
      map = new HashMap<String, Object>();
      map.put("value", data.getCsvVin());
      map.put("text", data.getCsvVin() + "(" + data.getCsvCarNo() + ")");
      mapList.add(map);
    }
    return VoResult.success().setValue(mapList);
  }


  /**
   * 根据文本检索车辆信息并导出。
   */
  @RequestMapping(value = "/report", method = RequestMethod.GET)
  public void getReport(HttpServletResponse res, CsVehicleQuery query,
      @CookieValue("token") String token,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer rows) {

    SrvUser user = userAccessUtils.getCurrentUser(token);
    this.addQueryConditionsByUser(user, query);

    PageInfo<CsVehicle> pageInfo = csVehicleService.getPage(query.getCrieria(), page, rows);
    List<CsVehicle> list = pageInfo.getList();
    for (CsVehicle data : list) {
      registResolvers(data);
    }

    OutputStream os = null;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String dateNowStr = sdf.format(System.currentTimeMillis());
    /**
     * 命名规则是 表意义+“——”+页号+“——”+页面大小+“——”+日期
     * */
    String fileName = "vehicle_" + page + "_" + rows + "_" + dateNowStr + ".xls";
    try {
      res.setHeader("content-type", "application/vnd.ms-excel");
      res.setContentType("application/vnd.ms-excel");
      res.setHeader("Content-Disposition",
          "attachment; filename=" + new String(fileName.getBytes("UTF-8"), "ISO8859-1"));
      os = res.getOutputStream();
      //文件路径
      ByteArrayOutputStream bytes = null;
      bytes = reportService.reportVehicles(list);
      os.write(bytes.toByteArray());
      os.flush();
      os.close();
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (os != null) {
          os.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }

  }

}
