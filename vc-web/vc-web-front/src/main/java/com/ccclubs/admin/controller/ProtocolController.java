package com.ccclubs.admin.controller;

import com.alibaba.fastjson.JSON;
import com.ccclubs.admin.vo.VoResult;
import com.ccclubs.protocol.dto.gb.GBMessage;
import com.ccclubs.protocol.dto.jt808.T808Message;
import com.ccclubs.protocol.dto.mqtt.MqMessage;
import com.ccclubs.protocol.util.StringUtils;
import com.ccclubs.protocol.util.Tools;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 * 协议解析工具Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/protocol")
public class ProtocolController {

  private static final Logger logger = LoggerFactory.getLogger(ProtocolController.class);
  /**
   * 国标协议
   */
  private String GBMESSAGE_PRE = "2323";
  /**
   * 808协议
   */
  private String JT808_PRE = "7E";


  @RequestMapping(value = "/transfer", method = RequestMethod.GET)
  public VoResult<String> transfer(String data) {
    if (!StringUtils.empty(data)) {
      try {
        byte[] srcByteArray = Tools.HexString2Bytes(data.trim());
        if (data.startsWith(GBMESSAGE_PRE)) {
          GBMessage gbMessage = new GBMessage();
          gbMessage.ReadFromBytes(srcByteArray);
          VoResult<String> r = new VoResult<>();
          r.setSuccess(true);
          r.setValue(gbMessage.toString());
          return r;
        }

        if (data.startsWith(JT808_PRE)) {
          T808Message t808Message = new T808Message();
          t808Message.ReadFromBytes(srcByteArray);
          VoResult<String> r = new VoResult<>();
          r.setSuccess(true);
          r.setValue(JSON.toJSONString(t808Message));
          return r;
        }

        MqMessage mqMessage = new MqMessage();
        mqMessage.ReadFromBytes(srcByteArray);

        VoResult<String> r = new VoResult<>();
        r.setSuccess(true);
        r.setValue(JSON.toJSONString(mqMessage));
        return r;

      } catch (Exception ex) {
        ex.printStackTrace();
        VoResult<String> r = new VoResult<>();
        r.setSuccess(true).setMessage("原始报文转换出错，请检查报文数据");
        r.setValue(null);
        return r;
      }
    }

    VoResult<String> r = new VoResult<>();
    r.setSuccess(true).setMessage("请输入原始报文");
    r.setValue(null);
    return r;
  }

  public static void main(String[] args) {
    String hexString = "232302FE4C4139315459334E584854504C5430303101011B1201080F2C00010103010000000006BF0D4227153E01100199006402010103344E204E20370D7927100500072839B801B9365D0601130ED301170EC4010A2F01042E070000000000000000000801010D422715005A00015A0EC80ECA0EC80ECA0ECA0ECB0EC80ECA0EC80ECB0EC80ECA0EC50EC70EC50EC50EC80EC50ED30EC50EC70EC50EC40EC50ECB0ECA0ECB0ECB0ECA0EC70EC80ECA0EC80EC70EC80ECA0EC80EC70ECA0EC80EC80EC80EC80EC70EC80EC50EC50EC80EC80EC50EC80ECA0EC70EC80EC80ECA0EC80EC70EC80ECA0EC70EC80ECA0ECA0EC70EC80EC80EC80ECB0EC80ECA0ECA0ECB0EC80EC80ECA0ECA0EC80EC80EC80ECB0ECB0ECA0ECA0EC80ECA0EC70EC70EC80EC5090101000A2E2F2F2E2F2F2F2F2F2FC8";
    GBMessage gbMessage = new GBMessage();
    gbMessage.ReadFromBytes(Tools.HexString2Bytes(hexString));
    System.out.println(JSON.toJSONString(gbMessage));
  }
}
